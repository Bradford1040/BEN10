[gcode_macro _CLIENT_VARIABLE]
gcode:
  variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
  variable_custom_park_x    : 300.0   ; custom x position; value must be within your defined min and max of X
  variable_custom_park_y    : 300.0   ; custom y position; value must be within your defined min and max of Y
  variable_custom_park_dz   : 10.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
  variable_retract          : 2.0   ; the value to retract while PAUSE
  variable_cancel_retract   : 2.0   ; the value to retract while CANCEL_PRINT
  variable_speed_retract    : 85.0  ; retract speed in mm/s
  variable_unretract        : 1.0   ; the value to unretract while RESUME
  variable_speed_unretract  : 45.0  ; unretract speed in mm/s
  variable_speed_hop        : 15.0  ; z move speed in mm/s
  variable_speed_move       : 100.0 ; move speed in mm/s
  variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
  variable_park_at_cancel_x : True  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
  variable_park_at_cancel_y : True  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
  ## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
  variable_use_fw_retract   : True ; use fw_retraction instead of the manual version [True/False]
  variable_idle_timeout     : 7800     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
  #variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
  ##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
  ## !!! Custom macros, please use with care and review the section of the corresponding macro.
  ## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
  ## Only  single line commands are supported, please create a macro if you need more than one command.
  #variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
  #variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
  #variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
#gcode:

[gcode_macro BED_TRAMMING]
gcode:
    M190 S70
    M109 S190
    PERCISE_HOME
    G4 P2000
    BED_SCREWS_ADJUST

#[gcode_macro BED_MESH]
#gcode:
    #PERCISE_HOME
    #M117 Heating
    #M190 S70
    #M117 Bed Mesh Calibrate
    #BED_MESH_CALIBRATE
    #M140 S0
    #M117 Saving Mesh
    #SAVE_CONFIG

[gcode_macro backup_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script


#[gcode_macro G29]
#gcode:
    #BED_MESH_PROFILE load=default

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
#default_parameter_X: 300    # edit to your preferred park position
#default_parameter_Y: 300    # edit to your preferred park position
#default_parameter_Z: 10     # edit to your preferred park position
#default_parameter_E: -2      # edit to your preferred retract length
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-2 F2100
    G1 Z10
    G90
    G1 X300 Y300 F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
#default_parameter_E: 1.1      # edit to your preferred retract length
gcode:
    G91
    G1 E1.1 F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro PART_COOLING_FAN_ON]
gcode:
    M106 S255

[gcode_macro PART_COOLING_FAN_OFF]
gcode:
    M106 S0

#[gcode_macro M600]
#gcode:
#  {% set X = params.X|default(50) | float %}
#  {% set Y = params.Y|default(220) | float %}
#  {% set Z = params.Z|default(10) | float %}
#  SAVE_GCODE_STATE NAME=M600_state
#  PAUSE
#  G91
#  G1 E-.8 F2700
#  G1 Z{Z}
#  G90
#  G1 X{X} Y{Y} F3000
#  G91
#  G1 E-90 F1000
#  RESTORE_GCODE_STATE NAME=M600_state

######################################################################
## Filament Change                                                  ##
######################################################################
# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 130mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "SWAP_RESUME" gcode.
[gcode_macro M600]
########### Gcode ############
gcode:
  {% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
  {% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
  {% set Z = params.Z|default(50)|int %}
  {% set E = params.E|default(-60)|int %}
#  {% set tool = params.tool|default(0)|int %}

        SAVE_GCODE_STATE NAME=M600_state
        PAUSE
        G91
        G1 E-2 F4000
        G1 Z{Z}
        G90
        G1 X{X} Y{Y} F3000        ;park position
        G0 E7 F500                ;extrude filament to get better blob on end
        G0 E{E} F600             ;retract additional filament to move out of melt zone
        G92 E0
        SET_FILAMENT_SENSOR SENSOR=fil_runout_sensor ENABLE=0

#    Use this command resume during a mid print filament swap (DONT USE OCTO/MAINSAIL/DWC RESUME)
[gcode_macro SWAP_RESUME] 
gcode:
    RESTORE_GCODE_STATE NAME=M600_state
    SET_FILAMENT_SENSOR SENSOR=fil_runout_sensor ENABLE=1
#    SET_FILAMENT_SENSOR SENSOR=e1_runout ENABLE=1
    resume
    
# Percise Homing
[gcode_macro PERCISE_HOME]
gcode:
  M117 Homing
  G90
  G28 Y0
  G1 Y5 F1200
  G4 P2000
  G28 X0
  G1 Y5 F1200
  G4 P2000
  G28 Z0
  M117 XYZ Home Set
  #G29 ;Load Mesh Bed Level  

# Do nozzle priming
[gcode_macro PRIME_EXTRUDER]
gcode:
#    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(170) | float %}
    M117 Priming Line
    G92 E0
    G1 X5.1 Y20 Z0.5 F3000
    G1 X5.1 Y200 Z0.28 F1800.0 E35; Draw the first line
    G92 E0
    G1 X5.4 Y200 Z0.28 F5000.0; Move to the side a little
    G1 X5.4 Y20.0 Z0.28 F1800.0 E25; Draw the second line
    G92 E0 
    G1 F2400 E-0.02 # Small retract to remove pressure
    G1 Z2.0 F3000 ;Move Z Axis up
    SMART_PARK
    M117 Printing

[gcode_macro START_PRINT]
#default_parameter_BED_TEMP: 70
#default_parameter_EXTRUDER_TEMP: 150
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(70) | float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(170) | float %}
#    G28  ;Home
    #G29 ;Load Mesh Bed Level
    # Start bed heating
    M117 PRE-Heating bed
    M140 S{BED_TEMP}
    # Start nozzle heating
    M117 PRE-Heating nozzle
    M104 S170
    # Use absolute coordinates
    G90
    M73
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    PERCISE_HOME
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    # Prime line
    PRIME_EXTRUDER
#    LINE_PURGE   ## KAMP Line Purge MACRO, purges near printed object instead of on edge of plate
  

[gcode_macro END_PRINT]
gcode: 
  G91 ; Relative positioning
  G1 E-2 Z20 F2700 ; Retract and lift Z
  G90 ; Absolute positioning
  G1 X300 Y300 F9000 ; end print X Y axis
  M104 S0 ; turn off temperature
  M140 S0 ; turn off heatbed
  M107 ; turn off fans
  M84  ; turn off steppers
  M221 S100  # Reset flow to 100%
  M220 S100 # Reset Feedrate to 100%
  M117 Print Complete

  
[gcode_macro m201]
description: Sets maximum accelleration.
  Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel: 1.7976931348623157e+308
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% if 'X' in params or 'Y' in params %}
    {% set accel = (params.X|default(params.Y)|float,
                    params.Y|default(params.X)|float)|min %}
    SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro m203]
description: Sets maximum velocity.
  Usage: M203 [X<velocity>] [Y<velocity>]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set velocity = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY="{velocity}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro m205]
description: Sets square corner velocity.
  Usage: M203 [X<velocity>] [Y<velocity>]
gcode:
  {% if 'X' in params or 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
      (params.X|default(0)|float, params.Y|default(0)|float)|min}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro m900]
description: Sets pressure advance.
  Usage: M900 [K<advance>] [T<extruder_index>]
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% if km.pressure_advance_scale > 0.0 %}
    {% set extruder = "extruder" ~ params.T|replace('0', '')
       if "T" in params else printer.toolhead.extruder %}
    {% if 'K' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
        params.K|float * km.pressure_advance_scale}"
    {% endif %}
  {% endif %}


[gcode_macro _reset_velocity_limits]
description: Sets maximum accelleration.
  Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode:
  SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"

[gcode_macro m300]
description: Emits and audible beep.
  Usage: M300 [P<duration>] [S<frequency>]
gcode:
  {% set settings = printer.configfile.settings %}
  {% if "output_pin beeper" in printer %}
    {% set P = (params.P|default(100)|int, 0)|max %}
    {% set S = (params.S|default(1000)|int, 1)|max %}
    SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
        settings["output_pin beeper"].scale|default(1.0) * 0.5
      } CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0
  {% else %}
    {action_respond_info(
       "M300 is disabled. To enable create an [output_pin beeper] config.")}
  {% endif %}



[gcode_macro _check_fan_params]
gcode:
  {% set MAXIMUM = params.MAXIMUM|default(
      printer["gcode_macro set_fan_scaling"].maximum)|int %}
  {% set MINIMUM = params.MINIMUM|default(
      printer["gcode_macro set_fan_scaling"].minimum)|int %}

  {% if params.SCALE and params.SCALE|float <= 0 %}
    { action_raise_error("SCALE must be a positive value.") }
  {% elif MINIMUM < 0 or MINIMUM > 255 %}
    { action_raise_error("MINIMUM must be between 0 and 255.") }
  {% elif MAXIMUM < 0 or MAXIMUM > 255 %}
    { action_raise_error("MAXIMUM must be between 0 and 255.") }
  {% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
    { action_raise_error("SPEED must be between 0 and 255.") }
  {% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
    { action_raise_error("BOOST must be between 0 and 255.") }
  {% elif MINIMUM > MAXIMUM %}
    { action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
  {% endif %}

# Sets optional scaling factor, minimum, and maximum applied to M106 commmand.
# If a MINIMUM greater than 0 is specified the fan will not stop unless an
# M107 command is issued. SET_FAN_SCALING always displays the current paramaters
# if scaling is active. SET_FAN_SCALING without any arguments will display the
# current scaling parameters without changing them.
[gcode_macro set_fan_scaling]
description: Sets fan scaling factors applied to M106 command. If a speed is
  provided it will be adjusted according to the scaling parameters.
  Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
                         [MINIMUM=<min>] [SPEED=<speed>]
variable_scale: 1.0
variable_boost: 0
variable_minimum: 0
variable_maximum: 255
variable_real_speed: 0
gcode:
  _CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
  {% set SCALE = params.SCALE|default(scale)|float %}
  {% set BOOST = params.BOOST|default(boost)|float %}
  {% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
  {% set MINIMUM = params.MINIMUM|default(minimum)|int %}
  {% set SPEED = params.SPEED|default(real_speed)|int %}

  {% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
    {action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
                         format(SCALE, MINIMUM, MAXIMUM, SPEED))}
  {% endif %}

  # Update parameters on change.
  {% if params|length > 0 %}
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
    # Run fan at adusted speed
    M106 S{SPEED}
  {% endif %}
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.SCALE|default(1.0)|float %}
  {% set dummy = params.BUMP|default(0)|int %}
  {% set dummy = params.MAXIMUM|default(255)|int %}
  {% set dummy = params.MINIMUM|default(0)|int %}
  {% set dummy = params.SPEED|default(current speed)|int %}
  " %} # End argument block for Mainsail

[gcode_macro reset_fan_scaling]
description: Clears all fan scaling factors.
  Usage: RESET_FAN_SCALING
gcode:
  SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description: Wraps M106 to implement scaling overrides.
rename_existing: M106.6245197
gcode:
  {% set S = params.S|default(255)|int %}
  {% set scale = printer["gcode_macro set_fan_scaling"] %}
  SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
  M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
                   scale.minimum) | max, scale.maximum) | min}








